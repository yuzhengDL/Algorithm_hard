class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        int m = board.size(), n = board[0].size();
        vector<vector<bool>> map(m, vector<bool>(n, false));
        for (int i=0;i<m;i++){
            for (int j=0;j<n;j++){
                if (dfs(board, map, word, i, j, 0))
                    return true;
            }
        }
        return false;
    }
    
    bool dfs(vector<vector<char>>& board, vector<vector<bool>>& map, string word, int x, int y, int idx){
        if (idx==word.size()) return true;
        if (x<0 || x>=board.size() || y<0 || y>=board[0].size() || map[x][y] || board[x][y]!=word[idx])
            return false;
        map[x][y] = true;
        
        bool res = 
        dfs(board, map, word, x, y+1, idx+1)||
        dfs(board, map, word, x, y-1, idx+1)||
        dfs(board, map, word, x+1, y, idx+1)||
        dfs(board, map, word, x-1, y, idx+1);
        map[x][y] = false;
        return res;
    }
};

/*
思路：广度优先遍历。借助两个队列queue来实现，分别用来存储当前层结点和前一层结点。
*/
/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
public:
    void connect(TreeLinkNode *root) {
        if (root==NULL) return;
        queue<TreeLinkNode *> tree1;
        queue<TreeLinkNode *> tree2;
        tree1.push(root);
        
        while(tree1.size()!=0 || tree2.size()!=0){
            if (tree1.size()!=0){
                while(tree1.size()!=0){
                    if(tree1.front()->left) tree2.push(tree1.front()->left);
                    if(tree1.front()->right) tree2.push(tree1.front()->right);
                    TreeLinkNode *temp = tree1.front();
                    tree1.pop();
                    if(tree1.size()!=0) temp->next = tree1.front();
                    else temp->next = NULL;
                }
            }
            else{
                while(tree2.size()!=0){
                    if(tree2.front()->left) tree1.push(tree2.front()->left);
                    if(tree2.front()->right) tree1.push(tree2.front()->right);
                    TreeLinkNode *temp = tree2.front();
                    tree2.pop();
                    if(tree2.size()!=0) temp->next = tree2.front();
                    else temp->next = NULL;
                }
            }
        }
    }
};



/*
思路：递归
*/
/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
public:
    void connect(TreeLinkNode *root) {
        if (root==NULL) return;
        
        if(root->left){
            root->left->next = root->right;
            root->right->next = root->next?root->next->left:NULL;
        }
        connect(root->left);
        connect(root->right);
    }
};
